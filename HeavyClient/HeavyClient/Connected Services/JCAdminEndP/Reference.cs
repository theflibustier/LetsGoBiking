//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JCAdminEndP
{
    using System.Runtime.Serialization;
    using Apache.NMS;
    using Apache.NMS.ActiveMQ;
    using System.Threading.Tasks;
    using System.Text.Json;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/RoutingBikes")]
    public partial class CompositeType : object
    {
        
        private string stationNameField;
        
        private string valueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stationName
        {
            get
            {
                return this.stationNameField;
            }
            set
            {
                this.stationNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    public interface IRoutingBikesSoap
    {
        Task<CompositeType> getStatsByStationAsync(string stationName);
        Task<CompositeType> getMostUsedStationAsync();
        Task<CompositeType> getLastUsedStationAsync();
    }
    
    public class RoutingBikesSoapClient : IRoutingBikesSoap
    {
        private readonly string brokerUri;
        private readonly string userName;
        private readonly string password;

        public RoutingBikesSoapClient(string brokerUri, string userName, string password)
        {
            this.brokerUri = brokerUri;
            this.userName = userName;
            this.password = password;
        }

        public async Task<CompositeType> getStatsByStationAsync(string stationName)
        {
            return await SendRequestAsync<CompositeType>("getStatsByStation", stationName);
        }

        public async Task<CompositeType> getMostUsedStationAsync()
        {
            return await SendRequestAsync<CompositeType>("getMostUsedStation", null);
        }

        public async Task<CompositeType> getLastUsedStationAsync()
        {
            return await SendRequestAsync<CompositeType>("getLastUsedStation", null);
        }

        private async Task<T> SendRequestAsync<T>(string operation, string parameter)
        {
            IConnectionFactory factory = new ConnectionFactory(brokerUri);
            using (IConnection connection = factory.CreateConnection(userName, password))
            {
                connection.Start();
                using (ISession session = connection.CreateSession())
                {
                    IDestination destination = session.GetQueue("RoutingBikesQueue");
                    using (IMessageProducer producer = session.CreateProducer(destination))
                    {
                        IMessage requestMessage = session.CreateTextMessage(JsonSerializer.Serialize(new { Operation = operation, Parameter = parameter }));
                        producer.Send(requestMessage);

                        using (IMessageConsumer consumer = session.CreateConsumer(destination))
                        {
                            IMessage responseMessage = consumer.Receive();
                            if (responseMessage is ITextMessage textMessage)
                            {
                                return JsonSerializer.Deserialize<T>(textMessage.Text);
                            }
                        }
                    }
                }
            }
            return default(T);
        }
    }
}
